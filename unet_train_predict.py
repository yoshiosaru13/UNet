# -*- coding: utf-8 -*-
"""unet_train/predict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n4BmX14Sv-Kd3uD7NQRoSq8ZSMVnZff1
"""

import numpy as np
import tensorflow as tf
import keras
from keras import layers, Sequential, Input
from keras.models import Model
from keras.preprocessing.image import ImageDataGenerator
from keras.utils import plot_model

import glob
import os
import matplotlib.pyplot as plt
from PIL import Image

from unet_model import *
from unet_data import *

unet = UNet()
model = unet.model()
model.compile(optimizer=keras.optimizers.Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=None, amsgrad=True),
              loss=keras.losses.BinaryCrossentropy(),
              metrics=['accuracy'])

history = model.fit(X, y, batch_size=8, verbose=1, epochs=20)

predict_imgs = model.predict(X_test)
print(predict_imgs.shape)

predict_imgs = np.argmax(predict_imgs, axis=3)
predict_imgs *= 255
print(predict_imgs.shape)

fig, axes = plt.subplots(4, 2, figsize=(15, 15), tight_layout=True)

for i in range(4):
    axes[i][0].imshow(y_test[i], cmap='gray')
    axes[i][0].set_title('True Image {}'.format(i))

    axes[i][1].imshow(predict_imgs[i], cmap='gray')
    axes[i][1].set_title('Predicted Image {}'.format(i))